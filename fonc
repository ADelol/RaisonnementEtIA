(defun sup(x l)
  (cond ((null l) nil)
           ((eq (car l) x) (sup x (cdr l)) )
           (T (cons (car l) (sup x (cdr l)))
) ))



(defun alt(l)
	(if (null l) 
		NIL
	(cons (CAR l)(alt (cdr(cdr l)))))
)

(defun aLaFin( x l)
	(append l (cons x ()))
)

(defun inverse(l)
	(if (null l) 
		nil
	(aLafin (car l)(inverse(cdr l)))
)
)



(defun somme(l)
	(cond ((null l) 0)
		((Numberp (car l))(+ (car l)(somme (cdr l))))
		(T (somme (cdr l)))
	)
)

(defun remplace(x y l)
	(cond ((null l) nil)
		((eq (car l) x)(cons y (remplace x y (cdr l))))
		(T (cons (car l)(remplace x y (cdr l))))
)
)



